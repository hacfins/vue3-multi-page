import { AnyObject } from '../table.type';
declare function useWatcher(): {
    assertRowKey: () => void;
    updateColumns: () => void;
    scheduleLayout: (needUpdateColumns: boolean, immediate?: boolean) => void;
    isSelected: (row: any) => boolean;
    clearSelection: () => void;
    cleanSelection: () => void;
    toggleRowSelection: (row: any, selected: any, emitChange?: boolean) => void;
    _toggleAllSelection: () => void;
    updateSelectionByRowKey: () => void;
    updateAllSelected: () => void;
    updateFilters: (columns: any, values: any) => {};
    updateCurrentRow: (_currentRow: AnyObject) => void;
    updateSort: (column: any, prop: any, order: any) => void;
    execFilter: () => void;
    execSort: () => void;
    execQuery: (ignore: any) => void;
    clearFilter: (columnKeys: any) => void;
    clearSort: () => void;
    toggleRowExpansion: (row: any, expanded: boolean) => void;
    setExpandRowKeysAdapter: (val: any) => void;
    setCurrentRowKey: (key: string) => void;
    toggleRowExpansionAdapter: (row: any, expanded: any) => void;
    isRowExpanded: (row: any) => boolean;
    updateExpandRows: () => void;
    updateCurrentRowData: () => void;
    loadOrToggle: (row: any) => void;
    states: {
        _currentRowKey: any;
        currentRow: any;
        expandRowKeys: import("vue").Ref<any[]>;
        treeData: import("vue").Ref<{}>;
        indent: import("vue").Ref<number>;
        lazy: import("vue").Ref<boolean>;
        lazyTreeNodeMap: import("vue").Ref<{}>;
        lazyColumnIdentifier: import("vue").Ref<string>;
        childrenColumnName: import("vue").Ref<string>;
        expandRows: import("vue").Ref<any[]>;
        defaultExpandAll: import("vue").Ref<boolean>;
        rowKey: any;
        data: import("vue").Ref<any[]>;
        _data: import("vue").Ref<any[]>;
        isComplex: import("vue").Ref<boolean>;
        _columns: import("vue").Ref<any[]>;
        originColumns: import("vue").Ref<any[]>;
        columns: import("vue").Ref<any[]>;
        fixedColumns: import("vue").Ref<any[]>;
        rightFixedColumns: import("vue").Ref<any[]>;
        leafColumns: import("vue").Ref<any[]>;
        fixedLeafColumns: import("vue").Ref<any[]>;
        rightFixedLeafColumns: import("vue").Ref<any[]>;
        leafColumnsLength: import("vue").Ref<number>;
        fixedLeafColumnsLength: import("vue").Ref<number>;
        rightFixedLeafColumnsLength: import("vue").Ref<number>;
        isAllSelected: import("vue").Ref<boolean>;
        selection: import("vue").Ref<any[]>;
        reserveSelection: import("vue").Ref<boolean>;
        selectOnIndeterminate: import("vue").Ref<boolean>;
        selectable: any;
        filters: import("vue").Ref<{}>;
        filteredData: any;
        sortingColumn: any;
        sortProp: any;
        sortOrder: any;
        hoverRow: any;
    };
};
export default useWatcher;
